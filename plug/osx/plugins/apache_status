#!/usr/bin/python
# encoding: utf-8

# Check_MK-Agent-Plugin - Apache Server Status
#
# Fetches the server-status page from detected or configured apache
# processes to gather status information about this apache process.
#
# To make this agent plugin work you have to load the status_module
# into your apache process. It is also needed to enable the "server-status"
# handler below the URL "/server-status".
#
# By default this plugin tries to detect all locally running apache processes
# and to monitor them. If this is not good for your environment you might
# create an apache_status.cfg file in MK_CONFDIR and populate the servers
# list to prevent executing the detection mechanism.
#
# It is also possible to override or extend the ssl_ports variable to make the
# check contact other ports than 443 with HTTPS requests.

import os, sys, urllib2, re
import subprocess, shlex
from threading import Timer

config_dir = os.getenv("MK_CONFDIR", "/etc/check_mk")
config_file = config_dir + "/apache_status.conf"
if not os.path.exists(config_file):
    config_file = config_dir + "/apache_status.cfg"


# None or list of (proto, ipaddress, port) tuples.
# proto is 'http' or 'https'
servers = None
ssl_ports = [ 443, ]
procs = [ 'apache2', 'httpd', 'httpd2-prefork', 'httpd2-worker', 'httpd.worker' ]

if os.path.exists(config_file):
    execfile(config_file)

def kill_proc(proc, timeout):
  timeout["value"] = True
  proc.kill()

def run_command_with_timeout(cmd, timeout_sec):
  proc = subprocess.Popen(shlex.split(cmd), stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  timeout = {"value": False}
  timer = Timer(timeout_sec, kill_proc, [proc, timeout])
  timer.start()
  stdout, stderr = proc.communicate()
  timer.cancel()
  return proc.returncode, stdout.decode("utf-8"), stderr.decode("utf-8"), timeout["value"]

def try_detect_servers():
    pids    = []
    servers = []

    results = run_command_with_timeout('/usr/sbin/lsof -c "/' + "|".join(procs) + '/" -a -i 4TCP -sTCP:LISTEN -n -P -b -w -R', 10)
    if results[0]:
        sys.exit(results[0])

    for line in results[1].splitlines():
        parts = line.split()
        # Skip lines with wrong format
        if len(parts) < 11 or 'LISTEN' not in parts[10]:
            continue

        pid = parts[1]
        ppid = parts[2]

        # Add only the parent pid of a single server process
        if ppid != '1':
            continue
        pids.append(pid)

        proto = 'http'
        address, port = parts[9].rsplit(':', 1)
        port = int(port)

        # Use localhost when listening globally
        if address == '*':
            address = '127.0.0.1'
        elif address == '::':
            address = '::1'

        # Switch protocol if port is SSL port. In case you use SSL on another
        # port you would have to change/extend the ssl_port list
        if port in ssl_ports:
            proto = 'https'

        servers.append((proto, address, port))

    return servers

if servers is None:
    servers = try_detect_servers()

if not servers:
    sys.exit(0)

print '<<<apache_status>>>'
for server in servers:
    if isinstance(server, tuple):
        proto, address, port = server
        page = 'server-status'
    else:
        proto = server['protocol']
        address = server['address']
        port = server['port']
        page = server.get('page', 'server-status')

    try:
        url = '%s://%s:%s/%s?auto' % (proto, address, port, page)
        # Try to fetch the status page for each server
        try:
            fd = urllib2.urlopen(url)
        except urllib2.URLError, e:
            if 'SSL23_GET_SERVER_HELLO:unknown protocol' in str(e):
                # HACK: workaround misconfigurations where port 443 is used for
                # serving non ssl secured http
                url = 'http://%s:%s/server-status?auto' % (address, port)
                fd = urllib2.urlopen(url)
            else:
                raise

        for line in fd.read().split('\n'):
            if not line.strip():
                continue
            if line.lstrip()[0] == '<':
                # seems to be html output. Skip this server.
                break
            if "TLSSessionCacheStatus" in line:
                # Fix for Apache 2.4 output.
                break
            print address, port, line
    except urllib2.HTTPError, e:
        sys.stderr.write('HTTP-Error (%s:%d): %s %s\n' % (address, port, e.code, e))

    except Exception, e:
        sys.stderr.write('Exception (%s:%d): %s\n' % (address, port, e))
