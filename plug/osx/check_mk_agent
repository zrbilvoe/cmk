#!/bin/sh
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2010             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

# NOTE: This agent has beed adapted from the Check_MK linux agent.

# This might be a good source as description of sysctl output:
# http://people.freebsd.org/~hmp/utilities/satbl/_sysctl.html

# Remove locale settings to eliminate localized outputs where possible
export LC_ALL=C
unset LANG

export MK_LIBDIR="/usr/lib/check_mk_agent"
export MK_CONFDIR="/etc/check_mk"
export MK_VARDIR="/var/lib/check_mk_agent"

# Provide information about the remote host. That helps when data
# is being sent only once to each remote host.
if [ "$REMOTE_HOST" ] ; then
    export REMOTE=$REMOTE_HOST
elif [ "$SSH_CLIENT" ] ; then
    export REMOTE=${SSH_CLIENT%% *}
fi

# Make sure, locally installed binaries are found
PATH=$PATH:/usr/local/bin

# All executables in PLUGINSDIR will simply be executed and their
# ouput appended to the output of the agent. Plugins define their own
# sections and must output headers with '<<<' and '>>>'
PLUGINSDIR=$MK_LIBDIR/plugins

# All executables in LOCALDIR will by executabled and their
# output inserted into the section <<<local>>>. Please refer
# to online documentation for details.
LOCALDIR=$MK_LIBDIR/local

# All files in SPOOLDIR will simply appended to the agent
# output if they are not outdated (see below)
SPOOLDIR=$MK_VARDIR/spool

# close standard input (for security reasons) and stderr
if [ "$1" = -d ]
then
    set -xv
else
    exec <&- 2>/dev/null
fi

# Runs a command asynchronous by use of a cache file
function run_cached () {
    local section=
    if [ "$1" = -s ] ; then local section="echo '<<<$2>>>' ; " ; shift ; fi
    local NAME=$1
    local MAXAGE=$2
    shift 2
    local CMDLINE="$section$@"

    if [ ! -d $MK_CONFDIR/cache ]; then mkdir -p $MK_CONFDIR/cache ; fi
    CACHEFILE="$MK_CONFDIR/cache/$NAME.cache"
    if [ ! -d $MK_VARDIR/cache ]; then mkdir -p $MK_VARDIR/cache ; fi
    CACHEFILE="$MK_VARDIR/cache/$NAME.cache"

    # Check if the creation of the cache takes suspiciously long and return
    # nothing if the age (access time) of $CACHEFILE.new is twice the MAXAGE
    local NOW=$(date +%s)
    if [ -e "$CACHEFILE.new" ] ; then
        local CF_ATIME=$(stat -c %X "$CACHEFILE.new")
        if [ $((NOW - CF_ATIME)) -ge $((MAXAGE * 2)) ] ; then
            # Kill the process still accessing that file in case
            # it is still running. This avoids overlapping processes!
            fuser -f "$CACHEFILE.new" >/dev/null 2>&1 | xargs -L 1 kill -9
            rm -f "$CACHEFILE.new"
			return
        fi
    fi

    # Check if cache file exists and is recent enough
    if [ -s "$CACHEFILE" ] ; then
        local MTIME=$(stat -c %Y "$CACHEFILE")
        if [ $((NOW - MTIME)) -le $MAXAGE ] ; then local USE_CACHEFILE=1 ; fi
        # Output the file in any case, even if it is
        # outdated. The new file will not yet be available
        cat "$CACHEFILE"
    fi

    # Cache file outdated and new job not yet running? Start it
    if [ -z "$USE_CACHEFILE" -a ! -e "$CACHEFILE.new" ] ; then
    	# When the command fails, the output is throws away ignored
        echo "set -o noclobber ; exec > \"$CACHEFILE.new\" || exit 1 ; $CMDLINE && mv \"$CACHEFILE.new\" \"$CACHEFILE\" || rm -f \"$CACHEFILE\" \"$CACHEFILE.new\"" | bash >/dev/null 2>&1 &
        disown $!
    fi
}

# Make run_cached available for subshells (plugins, local checks, etc.)
export -f run_cached

echo '<<<check_mk>>>'
echo Version: 1.2.6p12
echo AgentOS: darwin
echo AgentDirectory: $MK_CONFDIR
echo DataDirectory: $MK_VARDIR
echo SpoolDirectory: $SPOOLDIR
echo PluginsDirectory: $PLUGINSDIR
echo LocalDirectory: $LOCALDIR

osver="$(uname -r)"

echo '<<<df>>>';
df -kPT hfs | sed -e 's/^\([^ ][^ ]*\) \(.*\)$/\1 hfs \2/' | sed 1d

# processes including username, without kernel processes
echo '<<<ps>>>'
COLUMNS=10000
ps ax -o user=,vsz=,rss=,cputime=,pid=,command= | awk '{sub(/\./,":",$4); printf("(%s,%d,%d,%s,%d) %s\n", $1,$2,$3,$4,$5,substr($0,index($0,$6)))}'


# Memory Usage.
echo '<<<mem>>>'
## fill array with values from mv_stats command with values:
## ( free active inactive speculative "wired down" "copy-on-write" "zero filled" reactivated ins outs )
paging=4096
vstats=( $(vm_stat | egrep '^Pages' | sed 's/^.*: *//' | tr -d '.' | tr '\n' ' ') )
echo "MemTotal:   $((`sysctl -n hw.memsize` >> 10)) KB"
echo "MemFree:    $(( (${vstats[0]} * $paging) >> 10 )) KB"
echo "Active:     $(( (${vstats[1]} * $paging) >> 10 )) KB"
echo "Inactive:   $(( (${vstats[2]} * $paging) >> 10 )) KB"
echo "Mapped:     $(( (${vstats[4]} * $paging) >> 10 )) KB"

swapusage=( $(sysctl -n vm.swapusage | tr -cd "[:digit:] .") )
echo "SwapTotal:  $(bc -l -q <<< "${swapusage[0]} * 1024" | xargs printf "%1.0f") KB"
echo "SwapFree:   $(bc -l -q <<< "${swapusage[2]} * 1024" | xargs printf "%1.0f") KB"

# CPU Usage.
echo '<<<cpu>>>'
loads=$(sysctl -n vm.loadavg| tr -cd "[:digit:] ." | sed 's/^[ \t]*//;s/[ \t]*$//')
procs=$(ps ax -o start,state,pid | sed 1d | awk '$2 ~ /R/{n++} END{printf("%d/%d %d", n, NR, $3)}')
cpus=$(sysctl -n hw.ncpu)
echo "$loads $procs $cpus"

# Uptime
# Calculate the uptime in seconds since epoch compatible to /proc/uptime in linux
echo '<<<uptime>>>'
echo `date +%s` - `sysctl -n kern.boottime | cut -d' ' -f 4,7 | tr ',' '.' | tr -d ' '` | bc

# Network interfaces (Link, Autoneg, Speed)
echo '<<<netif>>>'
ifconfig -au | sed '/^[a-z]/{x;p;x;}' | \
awk 'BEGIN { RS = "" ; FS = "\n" } \
!/^[lo|fw]/{ split($1,n,":"); name = n[1]; \
if ( match($0,/status: active/)) {status = "yes"} else {status = "no"} \
if ( match($0,/media: autoselect/)) {auto = "on"} else {auto = "off"} \
if ( match($0,/\<full-duplex\>/)) {duplex = "Full"} else {duplex = " "} \
if ( match($0,/[0-9]+baseT/)) {speed = substr($0,RSTART,RLENGTH-5)"Mb/s"} else {speed = " "} \
print name, speed, duplex, auto, status}'

# I want my network info like it is on my linux machines!
echo '<<<lnx_if:sep(58)>>>'
netstat -inb | grep Link | awk '/en[0-9]+/{
  if (match($3, /\<Link#.+\>/))
  { printf( "\t%s:%s %s %s\t0\t0\t0\t0\t0\t%s\t%s\t%s\t0\t0\t%s\t0\t0\n", $1,$7,$5,$6,$10,$8,$9,$11) }
}'
eths=$(networksetup -listallhardwareports | awk '/Device: en/{print $2}')
i="0"
for i in $eths
do
echo "[$i]"
networksetup -getMedia $i | \
 awk '
 {
  gsub (/<|>/, "")
  if (sub(/baseT/, "Mb\/s")) {printf("\t%s: %s\n", "Speed",$2)}
  if (sub(/-duplex/, "")) {printf("\t%s: %s\n", "Duplex",toupper($3))}
 }
 /Current:/{$2 == "autoselect" ? x["Auto-negotiation"] = "on" :x["Auto-negotiation"] = "off" }
 /Active:/{ $2 == "autoselect" ? x["Link detected"] = "no" : x["Link detected"] = "yes" }
 { for ( item in x ); printf("\t%s: %s\n", item, x[item])}
 '
done

# Network device statistics (Packets, Collisions, etc)
# only the "Link/Num" interface has all counters.
# filter out no network and virtual adapters.
echo '<<<netctr>>>';
date +'%s'
netstat -inb | egrep -v '(^Name|lo|plip|gif|stf|vnic|vbox|fw)' | \
grep Link | awk '{print $1,$7,$5,$6,"0","0","0","0","0",$10,$8,$9,"0","0",$11,"0","0"; }'

# TCP Conn stats
echo '<<<tcp_conn_stats>>>'
netstat -ntfinet | awk ' /^tcp/ { c[$6]++; } END { for (x in c) { print x, c[x]; } }'

# Performance Counters for Disks
## Order of the numbers comming out of ioreg:
## 1 Operations Write, 2 Latency Time Write , 3 Bytes Read , 4 Errors Write ,
## 5 Total Time Read , 6 Retries Read , 7 Latency Time Read , 8 Errors Read ,
## 9 Total Time Write , 10 Bytes Write , 11 Operations Read , 12 Retries Write
echo '<<<diskstat>>>'
date +%s
ioreg -c IOBlockStorageDriver -k Statistics -r -w0 | \
    sed -n '/IOBlockStorageDriver/,/Statistics/p' | \
    grep 'Statistics' | tr -d [:alpha:] | tr -d [:punct:] | \
    awk '{print "0", "0", "disk"FNR, $11, "0", int($3/512), $5, $1, "0", int($10/512), $9, "0", "0", "0"}'


# Hardware sensors via IPMI (need ipmitool)
if type ipmitool > /dev/null
then
    run_cached -s ipmi 300 "ipmitool sensor list | tail -n +2 | grep -v 'command failed' | sed -e 's/ *| */|/g' -e 's/ /_/g' -e 's/_*"'$'"//' -e 's/|/ /g' | egrep -v '^[^ ]+ na ' | grep -v ' discrete '"
fi

# VirtualBox Guests. Section must always been output. Otherwise the
# check would not be executed in case no guest additions are installed.
# And that is something the check wants to detect
echo '<<<vbox_guest>>>'
if type VBoxControl >/dev/null 2>&1 ; then
    VBoxControl -nologo guestproperty enumerate | cut -d, -f1,2
    [ ${PIPESTATUS[0]} = 0 ] || echo "ERROR"
fi

# Time synchronization with NTP
# remove heading, make first column space separated
run_cached -s ntp 30 "waitmax 5 ntpq -np | sed -e 1,2d -e 's/^\(.\)/\1 /' -e 's/^ /%/'"

# Status of CUPS printer queues
if type lpstat > /dev/null 2>&1; then
    if pgrep -x cupsd > /dev/null 2>&1; then
        # first define a function to check cups
        function cups_queues () {
            CPRINTCONF=/etc/cups/printers.conf
            if [ -r "$CPRINTCONF" ] ; then
                LOCAL_PRINTERS=$(grep -E "<(Default)?Printer .*>" $CPRINTCONF | awk '{print $2}' | sed -e 's/>//')
                lpstat -p | while read LINE
                do
                    PRINTER=$(echo $LINE | awk '{print $2}')
                    if echo "$LOCAL_PRINTERS" | grep -q "$PRINTER"; then
                        echo $LINE
                    fi
                done
                echo '---'
                lpstat -o | while read LINE
                do
                    PRINTER=${LINE%%-*}
                    if echo $LOCAL_PRINTERS | grep -q $PRINTER; then
                        echo $LINE
                    fi
                done
            else
                lpstat -p
                echo '---'
                lpstat -o | sort
            fi
        }
        # Make cups_queues available for subshell
        export -f cups_queues
        # Use cups_queues function with run_cached and cache time of 5 mins
        run_cached -s cups_queues 300 "cups_queues"
    fi
fi

# Heartbeat monitoring
if which cl_status >/dev/null 2>&1; then
	# Different handling for heartbeat clusters with and without CRM
	# for the resource state
	if [ -S /var/run/heartbeat/crm/cib_ro ]; then
		echo '<<<heartbeat_crm>>>'
		crm_mon -1 -r | grep -v ^$
	else
		echo '<<<heartbeat_rscstatus>>>'
		cl_status rscstatus
	fi

	echo '<<<heartbeat_nodes>>>'
	for NODE in $(cl_status listnodes); do
		if [ $NODE != $HOSTNAME ]; then
			STATUS=$(cl_status nodestatus $NODE)
			echo -n "$NODE $STATUS"
			for LINK in $(cl_status listhblinks $NODE 2>/dev/null); do
				echo -n " $LINK $(cl_status hblinkstatus $NODE $LINK)"
			done
			echo
		fi
	done
fi

# Postfix mailqueue monitoring
#
# Only handle mailq when postfix user is present. The mailq command is also
# available when postfix is not installed. But it produces different outputs
# which are not handled by the check at the moment. So try to filter out the
# systems not using postfix by searching for the postfix user.a
#
# Cannot take the whole outout. This could produce several MB of agent output
# on blocking queues.
# Only handle the last 6 lines (includes the summary line at the bottom and
# the last message in the queue. The last message is not used at the moment
# but it could be used to get the timestamp of the last message.
# we determine the number of mails and their size in several postfix mail queues
if type postconf >/dev/null ; then
    echo '<<<postfix_mailq>>>'
    postfix_queue_dir=$(postconf -h queue_directory)
    postfix_count=$(find $postfix_queue_dir/deferred -type f | wc -l)
    postfix_size=$(du -ks $postfix_queue_dir/deferred | awk '{print $1 }')
    if [ $postfix_count -gt 0 ]
    then
       echo -- $postfix_size Kbytes in $postfix_count Requests.
    else
       echo Mail queue is empty
    fi
fi

# Fileinfo-Check: put patterns for files into /etc/check_mk/fileinfo.cfg
if [ -r "$MK_CONFDIR/fileinfo.cfg" ] ; then
    echo '<<<fileinfo:sep(124)>>>'
    date +%s
    for line in $(cat "$MK_CONFDIR/fileinfo.cfg")
    do
        stat -f "%N|%z|%m" $line 2>/dev/null

        if [ $? -ne 0 ]; then
            echo "$line|missing|$(date +%s)"
        fi
    done
fi

if type tmutil >/dev/null
then
    echo '<<<timemachine>>>'
    tmutil latestbackup 2>&1
fi

# Local checks
echo '<<<local>>>'
if cd $LOCALDIR ; then
    for skript in $(ls) ; do
        if [ -f "$skript" -a -x "$skript" ] ; then
            ./$skript
        fi
    done
    # Call some plugins only every X'th minute
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached local_${skript//\//\\} ${skript%/*} "$skript"
        fi
    done
fi

# Plugins
if cd $PLUGINSDIR ; then
    for skript in $(ls) ; do
        if [ -f "$skript" -a -x "$skript" ] ; then
            ./$skript
        fi
    done
    # Call some plugins only every Xth minute
    for skript in [1-9]*/* ; do
        if [ -x "$skript" ] ; then
            run_cached plugins_${skript//\//\\} ${skript%/*} "$skript"
        fi
    done
fi

# MK's Remote Plugin Executor
if [ -e "$MK_CONFDIR/mrpe.cfg" ]
then
		echo '<<<mrpe>>>'
		grep -Ev '^[[:space:]]*($|#)' "$MK_CONFDIR/mrpe.cfg" | \
		while read descr cmdline
		do
				PLUGIN=${cmdline%% *}
				OUTPUT=$(eval "$cmdline")
				echo -n "(${PLUGIN##*/}) $descr $? $OUTPUT" | tr \\n \\1
				echo
		done
fi


# Agent output snippets created by cronjobs, etc.
if [ -d "$SPOOLDIR" ]
then
    pushd "$SPOOLDIR" > /dev/null
    now=$(date +%s)

    for file in *
    do
        # output every file in this directory. If the file is prefixed
        # with a number, then that number is the maximum age of the
        # file in seconds. If the file is older than that, it is ignored.
        maxage=""
        part="$file"

        # Each away all digits from the front of the filename and
        # collect them in the variable maxage.
        while [ "${part/#[0-9]/}" != "$part" ]
        do
            maxage=$maxage${part:0:1}
            part=${part:1}
        done

        # If there is at least one digit, than we honor that.
        if [ "$maxage" ] ; then
            mtime=$(stat -f %m "$file")
            if [ $((now - mtime)) -gt $maxage ] ; then
                continue
            fi
        fi

        # Output the file
        cat "$file"
    done
    popd > /dev/null
fi
