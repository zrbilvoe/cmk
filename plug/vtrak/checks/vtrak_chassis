#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise vtrak chassis status

factory_settings["vtrak_chassis_default_levels"] = {
    "allowed_status" : ["OK"],
    "allowed_ready" : ["Active"],
    "transfer_rate" : "314572800", # 300MB
}

vtrak_chassis_role = { '-1': "na", '1': "primary", '2': "secondary" }

def inventory_vtrak_chassis(checkname, info):
  # info[0] is chassis table, info[1] is stats table
  if len(info) != 2:
    return
  return [(line[0], {}) for line in info[0]]

def check_vtrak_chassis(item, params, info):
  vtinfo = (line for line in info[0] if line[0] == item)
  chk_info = vtinfo.next()

  # chasis data
  index, serial, opstatus, role, readiness, arrays, phydrv, phydrvon, phydrvol, phydrvpfa, \
    phydrvrebuild, phydrvmissing, phydrvunconfig, logdrv, logdrvon, logdrvol, logdrvcrit, \
    logdrvdegrade, dirtycache, cacheusage  = chk_info

  # Performance counters
  # chasis stats
  datatransferred, readdatatransferred, writedatatransferred, numoferrors, numofnonrwerrors, \
    numofreaderrors, numofwriteerrors, numofiorequests, numofnonrwrequests, numofreadrequests, \
    numofwriterequests = map(saveint, info[1][int(index) - 1])

  this_time = time.time()
  rates = []
  wrapped = False
  perfdata = [ ]
  for name, counter in [
    ( "DataTransferred", datatransferred ),
    ( "ReadDataTransferred", readdatatransferred ),
    ( "WriteDataTransferred", writedatatransferred ),
    ( "NumOfIORequests", numofiorequests ),
    ( "NumOfNonRWRequests", numofnonrwrequests ),
    ( "NumOfReadRequests", numofreadrequests ),
    ( "NumOfWriteRequests", numofwriterequests ) ]:
    try:
      timedif, rate = get_counter("vtrak.%s.%s" % (name, item), this_time, counter)
      rates.append(rate)
      perfdata.append( (name, rate) )
    except MKCounterWrapped:
      wrapped = True
      # continue, other counters might wrap as well

  # continue, other counters might wrap as well
  # after all counters are handled
  if wrapped: raise MKCounterWrapped("Counter wrap")

  # non counter perfdata
  perfdata.append( ( "NumOfErrors", numoferrors ) )
  perfdata.append( ( "NumOfNonRWErrors", numofnonrwerrors ) )
  perfdata.append( ( "NumOfReadErrors", numofreaderrors ) )
  perfdata.append( ( "NumOfWriteErrors", numofwriteerrors ) )

  perfdata.append( ("CacheUsagePercentage",saveint(cacheusage),"","",0,100) )
  perfdata.append( ("DirtyCachePercentage",saveint(dirtycache),"","",0,100) )

  crit = False
  warn = False

  str_list = []
  if phydrvol != '0':
     crit = True
     str_list.append("%s/%s Physical Drives report Offline" % (phydrvol, phydrv))
  if phydrvpfa != '0':
    crit = True
    str_list.append("%s/%s Physical Drives report Predictive Failure Analysis (PFA)" % (phydrvpfa, phydrv))
  if phydrvrebuild != '0':
    warn = True
    str_list.append("%s/%s Physical Drives report Rebuilding" % (phydrvrebuild, phydrv))
  if phydrvmissing != '0':
    crit = True
    str_list.append("%s/%s Physical Drives report Missing" % (phydrvmissing, phydrv))
  if phydrvunconfig != '0':
    warn = True
    str_list.append("%s/%s Physical Drives report Unconfigured" % (phydrvunconfig, phydrv))

  if opstatus != 'OK':
    crit = True
  str_list.append("Operational Status is %s" % opstatus)
  if readiness != 'Active':
    crit = True
  str_list.append("Readiness reports %s" % readiness)

  out_str = ', '.join(str_list)
  if crit:
    return (2, "CRITICAL - %s" % out_str, perfdata)
  elif warn:
    return (1, "WARN - %s" % out_str, perfdata)
  else:
    return (0, "OK - %s" % out_str, perfdata)

  return (3, "UNKNOWN - %s info not found" % item)

check_info["vtrak_chassis"] = {
    "inventory_function"       : inventory_vtrak_chassis,
    "check_function"           : check_vtrak_chassis,
    "has_perfdata"             : True,
    "service_description"      : "Array %s",
    "default_levels_variable"  : "vtrak_chassis_default_levels",
}

snmp_info["vtrak_chassis"] = [
	( ".1.3.6.1.4.1.7933.1.20.1.3.1", [
		"1",	# raidv4CtrlIndex
		"7",	# raidv4CtrlSerialNumber
		"15",	# raidv4CtrlOpStatus
		"16",	# raidv4CtrlRole			na(-1), primary(1), secondary(0)
		"17",	# raidv4CtrlReadinessStatus
		"18",	# raidv4CtrlNumOfArrayPresent
		"19",	# raidv4CtrlNumOfPhyDrvPresent
		"20",	# raidv4CtrlNumOfPhyDrvOnline
		"21",	# raidv4CtrlNumOfPhyDrvOffline
		"22",	# raidv4CtrlNumOfPhyDrvWithPFA
		"23",	# raidv4CtrlNumOfPhyDrvRebuilding
		"24",	# raidv4CtrlNumOfPhyDrvMissing
		"25",	# raidv4CtrlNumOfPhyDrvUnconfigured
		"26",	# raidv4CtrlNumOfLogDrvPresent
		"27",	# raidv4CtrlNumOfLogDrvOnline
		"28",	# raidv4CtrlNumOfLogDrvOffline
		"29",	# raidv4CtrlNumOfLogDrvCritical
		"64",	# raidv4CtrlNumOfLogDrvDegraded
		"38",	# raidv4CtrlDirtyCachePercentage	Values: na(-1)
		"39",	# raidv4CtrlCacheUsagePercentage	Values: na(-1)
	]),
	# Class 3 Stats Data
	( ".1.3.6.1.4.1.7933.1.20.1.4.1", [
		"1",    # raidv4CtrlStatsDataTransferred  Counter64
		"2",    # raidv4CtrlStatsReadDataTransferred  Counter64
		"3",    # raidv4CtrlStatsWriteDataTransferred  Counter64
		"4",    # raidv4CtrlStatsNumOfErrors  Integer32
		"5",    # raidv4CtrlStatsNumOfNonRWErrors  Integer32
		"6",    # raidv4CtrlStatsNumOfReadErrors  Integer32
		"7",    # raidv4CtrlStatsNumOfWriteErrors  Integer32
		"8",    # raidv4CtrlStatsNumOfIORequests  Counter64
		"9",    # raidv4CtrlStatsNumOfNonRWRequests  Counter64
		"10",   # raidv4CtrlStatsNumOfReadRequests  Counter64
		"11",   # raidv4CtrlStatsNumOfWriteRequests  Counter64
	]),
]
snmp_scan_functions['vtrak_chassis'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
