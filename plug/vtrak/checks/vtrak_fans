#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise vtrak Fan status

factory_settings["vtrak_fans_default_levels"] = {
    "allowed_status" : ["Functional"],
}

vtrak_fans_type = { '0': "fan", '1': "blower" }

def inventory_vtrak_fans(checkname, info):
  return [("%s.%s" % (vtrak_fans_type[line[1]],line[0]), {}) for line in info]

def check_vtrak_fans(item, params, info):
  vtinfo = (line for line in info if "%s.%s" % (vtrak_fans_type[line[1]],line[0]) == item)
  chk_info = vtinfo.next()

  perfdata = [ ( "speed", saveint(chk_info[3])) ]
  msg_text = "%s - %s rpm" % (chk_info[2],chk_info[3])
  if chk_info[2] in params["allowed_status"]:
    return (0, "OK - %s" % msg_text, perfdata)
  else:
    return (2, "CRITICAL - %s" % msg_text, perfdata)
  return (3, "UNKNOWN - %s info not found" % item)

check_info["vtrak_fans"] = {
    "inventory_function"       : inventory_vtrak_fans,
    "check_function"           : check_vtrak_fans,
    "has_perfdata"             : True,
    "service_description"      : "%s",
    "default_levels_variable"  : "vtrak_fans_default_levels",
}

snmp_info["vtrak_fans"] = \
	( ".1.3.6.1.4.1.7933.1.20.1.11.1", [
		"1",	# raidv4CoolingDeviceIndex
		"2",	# raidv4CoolingDeviceType	Values: fan(0), blower(1)
		"3",	# raidv4CoolingDeviceStatus
		"4",	# raidv4CoolingDeviceSpeed
	] )

snmp_scan_functions['vtrak_fans'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
