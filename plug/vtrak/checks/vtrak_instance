#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise vtrak base info

factory_settings["vtrak_instance_default_levels"] = {
    "allowed_redundancy" : ["1"],
}


vtrak_type = { '0': "hba", '1': "subsys" }
vtrak_redundancy = { '0': "not-redundant", '1': "redundant", '2': "critical", '3': "not-supported" }
vtrak_connect = { '0': "not-supported", '1': "sas" }
vtrak_interface = { '0': "unknown", '1': "pci", '2': "iscsi", '3': "fibre channel", '4': "scsi", '5': "sas" }

def inventory_vtrak_instance(checkname, info):
  return [(line[0], {}) for line in info]

def check_vtrak_instance(item, params, info):
  vtinfo = (line for line in info if line[0] == item)
  chk_info = vtinfo.next()
  type = chk_info[1]
  descrip = chk_info[2]
  redundant = chk_info[3]
  controllers = chk_info[4]
  connection = chk_info[5]
  enclosures = chk_info[6]
  interface = chk_info[7]
  msg_txt = "%s %s is %s, %s controllers in %s enclosures, %s %s" % ( descrip, vtrak_type[type],
    vtrak_redundancy[redundant], controllers, enclosures,
    vtrak_interface[interface], vtrak_connect[connection] )
  if redundant in params["allowed_redundancy"]:
    return (0, "OK - %s" % msg_txt)
  elif redundant == "2":
    return (2, "CRITICAL - %s" % msg_txt)
  else:
    return (1, "WARN - %s" % msg_txt)
  return (3, "UNKNOWN - %s info not found" % item)

check_info["vtrak_instance"] = {
    "inventory_function"       : inventory_vtrak_instance,
    "check_function"           : check_vtrak_instance,
    "has_perfdata"             : False,
    "service_description"      : "RAID Set %s",
    "default_levels_variable"  : "vtrak_instance_default_levels",
}

snmp_info["vtrak_instance"] = \
	( ".1.3.6.1.4.1.7933.1", [
		"20.1.1.1.1",	# raidv4InstanceIndex
		"20.1.1.1.2",	# raidv4InstanceType				Values: hba(0), subsys(1)
		"20.1.1.1.3",	# raidv4InstanceDescription
		"20.1.1.1.6",	# raidv4InstanceRedundancyStatus	Values: not-redundant(0), redundant(1), critical(2), not-supported(255)
		"20.1.1.1.7",	# raidv4InstanceNumOfControllersPresent
		"20.1.1.1.8",	# raidv4InstanceInterConnectionType	Values: not-supported(0), sas(1)
		"20.1.1.1.9",	# raidv4InstanceNumOfEnclosuresPresent
		"20.1.1.1.10",	# raidv4InstanceHostInterfaceType	Values: unknown(0), pci(1), iscsi(2), fc(3), scsi(4), sas(5)
	] )

snmp_scan_functions['vtrak_instance'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
