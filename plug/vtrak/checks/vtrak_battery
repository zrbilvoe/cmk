#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Promise vtrak Battery status

factory_settings["vtrak_battery_default_levels"] = {
    "allowed_status" : ["Charging", "FullyCharged"],
    "capacity_crit" : 0,
    "holdtime_warn" : 72,
}

vtrak_battery_celltype = { '1': "one-cell", '2': "two-cell", '4': "four-cell", '5': "unknown" }

def inventory_vtrak_battery(checkname, info):
  return [(line[0], {}) for line in info ]

def check_vtrak_battery(item, params, info):
  binfo = (line for line in info if line[0] == item)
  chemistry, temperature, chargethreshold, dischargethreshold, cyclecount, \
    capacity, voltage, current, status, cells, holdtime = binfo.next()[1:]
  this_time = time.time()
  cycle_timedif, cycle_rate = get_counter("vtrak.cyclecount.%s" % item, this_time, saveint(cyclecount))
  perfdata = [
    ("Temperature",saveint(temperature),saveint(chargethreshold),saveint(dischargethreshold)),
    ("RemainCapacity",saveint(capacity),"",params["capacity_crit"],0,100),
    ("Voltage",saveint(voltage)),
    ("CycleCount",cycle_rate),
    ("HoldTime",saveint(holdtime),params["holdtime_warn"],0,0,200)
  ]

  msg_txt = "%s%% remaining, %s hour holdtime - %s %sC %s %s" % \
    (capacity,holdtime,status,temperature,vtrak_battery_celltype[cells],chemistry)
  if saveint(capacity) > saveint(params["capacity_crit"]):
    if status in params["allowed_status"] and saveint(holdtime) >= saveint(params["holdtime_warn"]):
      return (0, "OK - %s" % msg_txt,perfdata)
    else:
      return (1, "WARN - Hold time below %d hour threshold - %s" % (params["holdtime_warn"],msg_txt),perfdata)
  else:
    return (2, "CRITICAL - %s" % msg_txt,perfdata)

  return (3, "UNKNOWN - %s info not found" % item)

check_info["vtrak_battery"] = {
    "inventory_function"       : inventory_vtrak_battery,
    "check_function"           : check_vtrak_battery,
    "has_perfdata"             : True,
    "service_description"      : "Battery %s",
    "default_levels_variable"  : "vtrak_battery_default_levels",
}

snmp_info["vtrak_battery"] = \
  ( ".1.3.6.1.4.1.7933.1.20.1.15.1", [
    "1",  # raidv4BatteryIndex    Range: 0..255
    "6",  # raidv4BatteryDeviceChemistry    DisplayString
    "7",  # raidv4BatteryTemperature    Integer32
    "8",  # raidv4BatteryTempChargeThreshold    Integer32
    "9",  # raidv4BatteryTempDisChargeThreshold    Integer32
    "10", # raidv4BatteryCycleCount    Integer32
    "11", # raidv4BatteryRemainCapacity    Integer32
    "12", # raidv4BatteryVoltage    Integer32
    "13", # raidv4BatteryCurrent    Integer32
    "14", # raidv4BatteryStatus    DisplayString
    "15", # raidv4BatteryCellType    Values: one-cell(1), two-cell(2), four-cell(4), unknown(255)
    "16", # raidv4BatteryHoldTime    Integer32
  ] )
snmp_scan_functions['vtrak_battery'] = \
    lambda oid: oid(".1.3.6.1.2.1.1.2.0").startswith(".1.3.6.1.4.1.7933.1.10")
