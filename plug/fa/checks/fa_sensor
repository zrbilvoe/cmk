#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# 1. Fibre Alliance sensor info
# Polls the .1.3.6.1.3.94.1.8.1 oid, FCMGMT-MIB::connUnitSensorEntry
# "Each entry contains the information for a specific sensor."

factory_settings["fa_sensor_default_levels"] = {
    "allowed_states" : [ 3, 4, 5, ],
}

fa_sensor_statusname = { '1': "unknown", '2': "other", '3': "ok", '4': "warning", '5': "failed" }
fa_sensor_typename = { '1': "unknown", '2': "other", '3': "battery", '4': "fan", '5': "power-supply",
    '6': "transmitter", '7': "enclosure", '8': "board", '9': "receiver" }
fa_sensor_characteristicname = { '1': "unknown", '2': "other", '3': "temperature", '4': "pressure",
    '5': "emf", '6': "currentValue", '7': "airflow", '8': "frequency", '9': "power", '10': "door" }

def inventory_fa_sensor(checkname, info):
  sensors = len(info)
  if sensors > 0: return [(None,{"sensors": sensors})]

def check_fa_sensor(item, params, info):
  crit = False
  warn = False
  str_list = []
  sensors = len(info)
  if sensors != params["sensors"]:
    warn = True
    str_list.append("Mismatch - %d of %d sensors found" % (sensors, params["sensors"]))

  for index, id, status, message, type, character in info:
    if status == "5":
      crit = True
      str_list.insert(0, "%s - %s - %s %s %s" % (id, fa_sensor_statusname[status], fa_sensor_typename[type], fa_sensor_characteristicname[character], message))
    elif status == "4":
      warn = True
      str_list.append("%s - %s - %s %s %s" % (id, fa_sensor_statusname[status], fa_sensor_typename[type], fa_sensor_characteristicname[character], message))
    elif status == "3" or status == "2":
      continue

  if crit == True:
    return (2, "CRITICAL - %s" % ' '.join(str_list))
  elif warn == True:
    return (1, "WARN - %s" % ' '.join(str_list))
  else:
    return (0, "OK - %d of %d sensors return normal" % (sensors, params["sensors"]))

  return (3, "UNKNOWN - Sensor info not found")

check_info["fa_sensor"] = {
    "inventory_function"       : inventory_fa_sensor,
    "check_function"           : check_fa_sensor,
    "has_perfdata"             : False,
    "service_description"      : "FA Sensors",
    "default_levels_variable"  : "fa_sensor_default_levels",
    "includes"                 : [ "fa.include" ],
}

snmp_info["fa_sensor"] = \
	( ".1.3.6.1.3.94.1.8.1", [
		"2",	# connUnitSensorIndex
		"3",	# connUnitSensorUnitId
		"4",	# connUnitSensorStatus	Values: unknown(1), other(2), ok(3), warning(4), failed(5)
		"6",	# connUnitSensorMessage
		"7",	# connUnitSensorType	Values: unknown(1), other(2), battery(3),
				#						fan(4), power-supply(5), transmitter(6), enclosure(7), board(8), receiver(9)
		"8",	# connUnitSensorCharacteristic	Values: unknown(1), other(2), temperature(3),
				#						pressure(4), emf(5), currentValue(6), airflow(7),
				#						frequency(8), power(9), door(10)
	] )

snmp_scan_functions['fa_sensor'] = \
    lambda oid: oid(".1.3.6.1.3.94.1.1.0") != None
