#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>
# --------------------------------------------------------------------------------
# Fibre Alliance port info
# Tracks port state and speed on compatable fibre switches
# Polls oid .1.3.6.1.3.94.1.10 , FCMGMT-MIB::connUnitPortTable
# "Generic information on ports for a specific connUnit."

factory_settings["fa_port_default_levels"] = {
    "allowed_states" : [ 2, 3, ],
}

fa_port_statename = { '1': "unknown", '2': "online", '3': "offline", '4': "bypassed",'5': "diagnostics" }
fa_port_statusname = { '1': "unknown", '2': "unused", '3': "ready", '4': "warning", '5': "failure",
    '6': "notparticipating", '7': "initializing", '8': "bypass", '9': "ols", '10': "other" }
fa_port_hwstatename = { '1': "unknown", '2': "failed", '3': "bypassed", '4': "active",
    '5': "loopback", '6': "txfault", '7': "noMedia", '8': "linkDown" }
fa_port_transmittername = { '1': "unknown", '2': "other", '3': "unused", '4': "shortwave",
	'5': "longwave", '6': "copper", '7': "scsi", '8': "longwaveNoOFC", '9': "shortwaveNoOFC",
	'10': "longwaveLED", '11': "ssa" }
fa_port_modulename = { '1': "unknown", '2': "other", '3': "gbic", '4': "embedded", '5': "glm",
    '6': "gbicSerialId", '7': "gbicNoSerialId", '8': "gbicNotInstalled", '9': "smallFormFactor" }

def fa_port_itemname(info,id,index,idlist):
	uid = fa_hex2string(id)
	iname = fa_unitid_genitem(uid,idlist)
	return "%d_%s" % (iname, index)

def inventory_fa_port(checkname, info):
  inventory = []
  uidlist = []
  for id, index, state, status, transmitter, module, speed, hwstate in info:
    name = fa_port_itemname(info,id,index,uidlist)
    inventory.append((name,{"speed": speed}))
  return inventory

def check_fa_port(item, params, info):
  uidlist = []
  for id, index, state, status, transmitter, module, speed, hwstate in info:
    name = fa_port_itemname(info,id,index,uidlist)
    if name != item: continue
    statename = fa_port_statename[state]
    statusname = fa_port_statusname[status]
    hwstatename = fa_port_hwstatename[hwstate]
    msg_text = "%s / %s / %s" % (statename, statusname, hwstatename,)
    if status == "5" or hwstatename == "2":
      return (2, "CRITICAL - %s" % (msg_text))
    elif speed != params["speed"]:
      return (1, "Warning - Speed Mismatch - port %s" % speed)
    else:
      unit_text = "%s, %s" % (fa_port_modulename[module], fa_port_transmittername[transmitter])
      return (0, "OK - %s - %s" % (msg_text,unit_text))
  return (3, "UNKNOWN - Port info not found")

check_info["fa_port"] = {
    "inventory_function"       : inventory_fa_port,
    "check_function"           : check_fa_port,
    "has_perfdata"             : False,
    "service_description"      : "FA Port %s",
    "default_levels_variable"  : "fa_port_default_levels",
    "includes"                 : [ "fa.include" ],
}

snmp_info["fa_port"] = \
	( ".1.3.6.1.3.94.1.10.1", [
		"1",	# connUnitPortUnitId
		"2",	# connUnitPortIndex
		"6",	# connUnitPortState			unknown(1), online(2), offline(3), bypassed(4), diagnostics(5)
		"7",	# connUnitPortStatus		unknown(1), unused(2), ready(3), warning(4), failure(5),
				#							notparticipating(6), initializing(7), bypass(8), ols(9), other(10)
		"8",	# connUnitPortTransmitterType	unknown(1), other(2), unused(3), shortwave(4), longwave(5),
				#							copper(6), scsi(7), longwaveNoOFC(8), shortwaveNoOFC(9), longwaveLED(10), ssa(11)
		"9",	# connUnitPortModuleType	unknown(1), other(2), gbic(3), embedded(4), glm(5),
				#							gbicSerialId(6), gbicNoSerialId(7), gbicNotInstalled(8), smallFormFactor(9)
		"15",	# connUnitPortSpeed
		"23",	# connUnitPortHWState		unknown(1), failed(2), bypassed(3), active(4), loopback(5),
				#							txfault(6), noMedia(7), linkDown(8)
	] )

snmp_scan_functions['fa_port'] = \
    lambda oid: False  # Currently not using this.
#    lambda oid: oid(".1.3.6.1.3.94.1.1.0") != None
