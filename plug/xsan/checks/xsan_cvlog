# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

### Collect and dump XSAN information.
# from `cvadmin -e fsmlist` will put out:
# fsm   name index port pid ismaster state timestamp launchcount coredumps flags lastadminaction timestamp lastterminationcode timestamp
# For each volume will put out `cvadmin -F Volume -e stat` with:
# stats volume timestamp activeconnections blocksize devices groups blockstotal blocksfree
# and `cvadmin -F Volume -e show long` with:
# stripe volume number name status totalblocks reserverblocks freeblocks
# not output with above: multipathmethod primarystripe readenabled writeenbaled
# for paths:
# paths name device hba ctl lun state   controller
# for disks:
# disks name device sectors sectorsize
import re

## XSAN CVLOG
# the inventory function
def inventory_xsan_cvlog(checkname, info):
    inventory = []
    for line in info:
        if line[7] != 'HiPriWr': continue
        params = {}
        inventory.append( ("%s_%s" % (line[0], line[9]), params) )
    return inventory

# the check function
def check_xsan_cvlog(item, params, info):
    perfdata = []
    infos = []
    status = 0
    # error checking might be turned off
    if "avg_levels" in params:
    	warn, crit = params["avg_levels"]
    else:
    	warn, crit = None, None

    for line in info:
        # is this our line?
        if line[7] != 'HiPriWr': continue
        if item == "%s_%s" % (line[0], line[9]):
            avglen = line[10].rsplit('/',1).pop()
            minlen = line[11].rsplit('/',1).pop()
            maxlen = line[12].rsplit('/',1).pop().rstrip('.')

            y = re.sub('[\[\]]', '', line[1])
            md = re.sub('[\[\]]', '', line[2])
            hms = re.sub('[\[\]]', '', line[3])
            hms = hms.rsplit('.',1).pop(0)
            this_time = time.time()
            that_time = time.strptime("%s %s %s" % (y, md, hms), "%Y %m%d %H:%M:%S")
            diff = int(this_time - time.mktime(that_time)) / 60
            if diff > 60: continue

            perfdata.append( ( "Average", int(avglen), warn, crit ) )
            perfdata.append( ( "Minimum", int(minlen) ) )
            perfdata.append( ( "Maximum", int(maxlen) ) )

            infos.append ("Average: %s μs" % avglen )
            if crit != None and int(avglen) > crit:
                infos[-1] += "(!!)"
                status = max(status, 2)
            elif warn != None and int(avglen) > warn:
                infos[-1] += "(!)"
                status = max(status, 1)
            infos.append ("Minimium: %s μs Maximum: %s μs" % (minlen, maxlen) )

            infos.append ("%d minutes old" % diff )
            return (status, ", ".join(infos) , perfdata)

    return (3, "cvlog updates for %s not found in agent output" % item)

# declare the check to Check_MK
check_info["xsan_cvlog"] = {
    'check_function':           check_xsan_cvlog,
    'inventory_function':       inventory_xsan_cvlog,
    "service_description":      "XSAN Performance %s",
    "default_levels_variable":  "xsan_default_levels",
    "has_perfdata":             True,
    "includes"                : [ "xsan.include" ],
    "group"                   : "filesystem",
}
