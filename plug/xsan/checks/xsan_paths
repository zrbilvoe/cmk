#!/usr/bin/python
# -*- encoding: utf-8; py-indent-offset: 4 -*-
# +------------------------------------------------------------------+
# |             ____ _               _        __  __ _  __           |
# |            / ___| |__   ___  ___| | __   |  \/  | |/ /           |
# |           | |   | '_ \ / _ \/ __| |/ /   | |\/| | ' /            |
# |           | |___| | | |  __/ (__|   <    | |  | | . \            |
# |            \____|_| |_|\___|\___|_|\_\___|_|  |_|_|\_\           |
# |                                                                  |
# | Copyright Mathias Kettner 2012             mk@mathias-kettner.de |
# +------------------------------------------------------------------+
#
# This file is part of Check_MK.
# The official homepage is at http://mathias-kettner.de/check_mk.
#
# check_mk is free software;  you can redistribute it and/or modify it
# under the  terms of the  GNU General Public License  as published by
# the Free Software Foundation in version 2.  check_mk is  distributed
# in the hope that it will be useful, but WITHOUT ANY WARRANTY;  with-
# out even the implied warranty of  MERCHANTABILITY  or  FITNESS FOR A
# PARTICULAR PURPOSE. See the  GNU General Public License for more de-
# ails.  You should have  received  a copy of the  GNU  General Public
# License along with GNU Make; see the file  COPYING.  If  not,  write
# to the Free Software Foundation, Inc., 51 Franklin St,  Fifth Floor,
# Boston, MA 02110-1301 USA.

# Author: Jeremy Leggat <jleggat@asu.edu>

### Collect and dump XSAN information.
# from `cvadmin -e fsmlist` will put out:
# fsm	name index port pid ismaster state timestamp launchcount coredumps flags lastadminaction timestamp lastterminationcode timestamp
# For each volume will put out `cvadmin -F Volume -e stat` with:
# stats	volume timestamp activeconnections blocksize devices groups blockstotal blocksfree
# and `cvadmin -F Volume -e show long` with:
# stripe volume	number name status totalblocks reserverblocks freeblocks
# not output with above: multipathmethod primarystripe readenabled writeenbaled
# for paths:
# paths	name device	hba	ctl	lun	state	controller
# for disks:
# disks	name device	sectors	sectorsize
import re

## XSAN PATHS
# the inventory function
def inventory_xsan_paths(checkname, info):
    inventory = []
#    controller = ""
    for line in info:
    	if line[0] == 'Controller:':
 #   		controller = re.sub('[\<\>]', '', line[1])
    		continue
    	params = {}
 #   	params["controller"] = controller
    	params["state"] = list_get_next(line, "state:")
    	inventory.append( (line[0], params) )
    return inventory

# the check function
def check_xsan_paths(item, params, info):
    infos = []
    status = 0
    for line in info:
    	if line[0] == item:
			state = list_get_next(line, "state:")
			lun = list_get_next(line, "lun:")
			ctl = list_get_next(line, "ctl:")
			hba = list_get_next(line, "hba:")
			device = list_get_next(line, "device:")

			if state != params["state"]:
				infos.append( "Expected %s state" % params["state"] )
				infos[-1] += "(!!)"
				status = max(status, 2)
			infos.append( "current state %s" % state  )
			infos.append( "hba %s" % hba )
			infos.append( "controller %s" % ctl )
			infos.append( "lun %s" % lun )
			infos.append( "device name %s" % device )

			return ( status, ", ".join(infos) )

#    return (params["path_not_found_level"], "Path %s not found in agent output" % item)

# declare the check to Check_MK
check_info["xsan_paths"] = {
	'check_function':			check_xsan_paths,
	'inventory_function':		inventory_xsan_paths,
	"service_description":		"XSAN Path %s",
	"default_levels_variable":	"xsan_default_levels",
    "includes"                : [ "xsan.include" ],
	"has_perfdata":				False,
    "group"                   : "filesystem",
}
